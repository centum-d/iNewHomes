<?php

namespace rest\versions\v1\actions;

use yii\data\ActiveDataProvider;

/**
 * Class IndexAction
 * @package rest\versions\v1\actions
 */
class ComplexIndexAction extends \tuyakhov\jsonapi\actions\IndexAction
{

    public function run()
    {
        $this->dataFilter = [
            'class' => 'yii\data\ActiveDataFilter',
            'searchModel' => function () {
                return (new \yii\base\DynamicModel(['name' => null, 'complex_id' => null, 'city_id' => null]))
                    ->addRule('city_id', 'integer')
                    ->addRule('complex_id', 'integer')
                    ->addRule('name', 'trim')
                    ->addRule('name', 'string');
            }
        ];

        return parent::run(); // TODO: Change the autogenerated stub
    }

    /**
     * Prepares the data provider that should return the requested collection of the models.
     * @return mixed|null|object|DataFilter|ActiveDataProvider
     * @throws \yii\base\InvalidConfigException
     */
    protected function prepareDataProvider()
    {
        $filter = $this->getFilter();

        if ($this->prepareDataProvider !== null) {
            return call_user_func($this->prepareDataProvider, $this, $filter);
        }

        /* @var $modelClass \yii\db\BaseActiveRecord */
        $modelClass = $this->modelClass;

        $query = $modelClass::find();
        if (!empty($filter)) {
            $query->andWhere($filter);
        }

        if (isset($filter['city_id'])) {
            $query->from('city, complex');
            $query->andWhere('ST_Contains(city.geom, complex.geom) AND city.city_id = :city_id', [
                ':city_id' => $filter['city_id']
            ]);
        }

        $query->notDeleted();

        return \Yii::createObject([
            'class' => ActiveDataProvider::class,
            'query' => $query,
            'pagination' => [
                'params' => [
                    'page' => \Yii::$app->getRequest()->getQueryParam('page', 1)
                ],
                'pageSizeParam' => 10
            ],
            'sort' => [
                'enableMultiSort' => true,
                'defaultOrder' => [
                    'updated_at' => SORT_DESC
                ]
            ]
        ]);
    }
}